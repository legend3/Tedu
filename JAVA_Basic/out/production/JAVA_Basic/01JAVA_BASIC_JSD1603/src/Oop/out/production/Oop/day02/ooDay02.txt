回顾:
1.什么是类？什么是对象？ 
2.如何创建类？如何创建对象？
3.引用类型画等号
4.null和NullPointerException

引用中装的都是地址
Cell c = new Cell();
c.row = 2;
c.col = 5;
c.drop();
c.moveLeft(3);
String s = c.getCellInfo();

class Cell{
  int row;
  int col;
  void drop(){row++;}
  void moveLeft(int n){col-=n;}
  void moveRight(int n){
    col+=n;
  }
  String getCellInfo(){return row+","+col;}
}


笔记:
1.方法的签名:方法名+参数列表
2.方法的重载(overload):
  1)在同一个类中，方法名称相同，参数列表不同
  2)编译器在编译时会自动根据签名绑定调用不同的方法
3.构造方法:构造函数、构造器、构建器
  1)常常用于给成员变量赋初值
  2)与类同名，没有返回值类型
  3)在创建(new)对象时被自动调用
  4)若自己不写构造，则编译器默认提供一个无参构造
    若自己写了构造，则编译器不再默认提供
  5)构造方法可以重载
4.this:指代当前对象，哪个对象调指的就是哪个对象
       方法中访问成员变量之前默认有个this.
  用法:
    1)this.成员变量名------访问成员变量
    2)this.方法名()--------调用方法
    3)this()---------------调用构造方法
5.引用类型数组:
  1)Cell[] cells = new Cell[4]; //创建Cell数组对象
    cells[0] = new Cell(2,5); //创建Cell对象
    cells[1] = new Cell(3,6);
    cells[2] = new Cell(4,7);
    cells[3] = new Cell(5,8);
  2)Cell[] cells = new Cell[]{
      new Cell(2,5),
      new Cell(3,6),
      new Cell(4,7),
      new Cell(5,8)
    };
  3)int[][] arr = new int[3][]; //数组的数组
    arr[0] = new int[2];
    arr[1] = new int[3];
    arr[2] = new int[2];
    arr[1][0] = 100;
  4)int[][] arr = new int[3][4]; //数组的数组
    for(int i=0;i<arr.length;i++){
      for(int j=0;j<arr[i].length;j++){
        arr[i][j] = 100;
      }
    }


任务:
1.定义T类和J类
2.定义O类
3.其余的4个类任选其一













1)找对象:一堆T型，J型，L型，I型，O型，S型，Z型-----对象
2)抽类:T,J,L,I,O,S,Z
3)设计类中的成员变量和方法:
4)创建对象并测试:



T t1 = new T(); //00,01,02,11
T t2 = new T(); //00,01,02,11
T t3 = new T(); //00,01,02,11


T t1 = new T(2,5); //25,26,27,36
T t2 = new T(1,4); //14,15,16,25
T t3 = new T(); //00,01,02,11

class T{
  Cell[] cells;
  T(){
    this(0,0);
  }
  T(int row,int col){
    cells = new Cell[4];
    cells[0] = new Cell(row,col);
    cells[1] = new Cell(row,col+1);
    cells[2] = new Cell(row,col+2);
    cells[3] = new Cell(row+1,col+1);
  }
  void drop(){
    for(int i=0;i<cells.length;i++){
      cells[i].row++;
    }
  }
  void moveLeft(){
    for(int i=0;i<cells.length;i++){
      cells[i].col--;
    }
  }
  void moveRight(){
    for(int i=0;i<cells.length;i++){
      cells[i].col++;
    }
  }
  void print(){ //输出4个格子的行列号
    for(int i=0;i<cells.length;i++){
      String str = cells[i].getCellInfo();
      System.out.println(str);
    }
  }
}


class J{
  Cell[] cells;
  J(){
    this(0,0);
  }
  J(int row,int col){
    cells = new Cell[4];
    cells[0] = new Cell(row,col);
    cells[1] = new Cell(row,col+1);
    cells[2] = new Cell(row,col+2);
    cells[3] = new Cell(row+1,col+2);
  }
  void drop(){
    for(int i=0;i<cells.length;i++){
      cells[i].row++;
    }
  }
  void moveLeft(){
    for(int i=0;i<cells.length;i++){
      cells[i].col--;
    }
  }
  void moveRight(){
    for(int i=0;i<cells.length;i++){
      cells[i].col++;
    }
  }
  void print(){ //输出4个格子的行列号
    for(int i=0;i<cells.length;i++){
      String str = cells[i].getCellInfo();
      System.out.println(str);
    }
  }
}














class L{
}
class I{
}
class O{
}
class S{
}
class Z{
}













    i=0
      j=0 arr00
      j=1 arr01
      j=2 arr02
      j=3 arr03
    i=1
      j=0 arr10
      j=1 arr11
      j=2 arr12
      j=3 arr13





 





int  [] arr   = new int[3];
Cell [] cells = new Cell[3];

//声明int[]型数组arr，包含3个元素
//每个元素都是int[]型，默认值为null
int[][] arr = new int[3][];
arr[0] = new int[2];
arr[1] = new int[3];
arr[2] = new int[2];
给arr中第2个元素中的第1个元素赋值为100
arr[1][0] = 100;

arr-------------int[][]
arr[0]----------int[]
arr[0][0]-------int













int[] arr = {
  1,
  4,
  7
};

Cell[] cells = new Cell[]{
  new Cell(2,5),
  new Cell(3,6),
  new Cell(4,7),
  new Cell(5,8)
};










//声明int型数组arr，包含3个元素
//每个元素都是int型，默认值为0
int [] arr   = new int[3];

//声明Cell型数组cells，包含4个元素
//每个元素都是Cell型，默认值为null
Cell[] cells = new Cell[4];


int[] arr = new int[3];
arr[0] = 250;
arr[1] = 360;
arr[2] = 470;

Cell[] cells = new Cell[4]; //创建Cell数组对象
cells[0] = new Cell(2,5); //创建Cell对象
cells[1] = new Cell(3,6);
cells[2] = new Cell(4,7);
cells[3] = new Cell(5,8);



Cell c = new Cell(2,5);
c.row = 8;









class Cell{
  int row; //成员变量
  int col;
  Cell(int row,int col){
    this.row=row;
    this.col=col;
  }
  void drop(){
    row++;
  }
}











class Cell{
  int row;
  int col;
  Cell(){
    this(0,0);
  }
  Cell(int n){
    this(n,n);
  }
  Cell(int row1,int col1){
    row=row1;
    col=col1;
  }
}














Cell c = new Cell();
c.row = 2;
c.col = 5;
c.drop();

Cell cc = new Cell();
cc.row = 4;
cc.col = 7;
cc.drop();

Cell ccc = new Cell();
ccc.row = 1;
ccc.col = 9;
ccc.drop();


Cell c = new Cell(2,5);
Cell cc = new Cell(4,7);

Cell c = new Cell();
c.row = 2;
c.col = 5;

class Cell{
  int row;
  int col;
  Cell(int row1,int col1){
    this.row=row1; //cc.row=4;
    this.col=col1; //cc.col=7;
  }
  void drop(){
    this.row++; //ccc.row++;
  }
}















Cell c = new Cell();
c.drop();
c.moveLeft(3);
String s = c.getCellInfo();


class Cell{
  int row;
  int col;
  void drop(){
    this.row++; //c.row++;
  }
  void moveLeft(int n){
    this.col-=n; //c.col-=3;
  }
  String getCellInfo(){
    return this.row+","+this.col; //return c.row+","+c.col;
  }
}










class Cell{
  int row;
  int col;
  Cell(){
    row=0;
    col=0;
  }
  Cell(int n){
    row=n;
    col=n;
  }
  Cell(int row1,int col1){
    row=row1;
    col=col1;
  }
}














Cell c = new Cell(); //正确

class Cell{
  int row;
  int col;
}










Cell c = new Cell(2,5);
Cell cc = new Cell(3,8);
Cell ccc = new Cell(); //编译错误，没有无参构造方法

class Cell{
  int row;
  int col;
  Cell(int row1,int col1){
    row = row1;
    col = col1;
  }
}




















//1.创建对象
//2.调用构造方法
Student zs = new Student("zhangsan",25,"河北廊坊");

Student ls = new Student("lisi",27,"黑龙江佳木斯");







Student zs = new Student();
Student zs = new Student("zhangan",25,"廊坊");

class Student{
  String name;
  int age;
  String address;
  Student(){
  }
  //给成员变量赋初值
  Student(String name1,int age1,String address1){
    name = name1;
    age = age1;
    address = address1;
  }
}






Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";

Student ls = new Student();
ls.name = "lisi";
ls.age = 27;
ls.address = "黑龙江佳木斯";


Student zs = new Student();
zs.setInfo("zhangsan",25,"河北廊坊");

Student ls = new Student();
ls.setInfo("lisi",27,"黑龙江佳木斯");















void println(){
}
void println(String s){
}
void println(int a){
}
void println(double b){
}
....
....


System.out.println();
System.out.println("HelloWorld");
System.out.println(111);
System.out.println(45.678);
System.out.println(true);
......










