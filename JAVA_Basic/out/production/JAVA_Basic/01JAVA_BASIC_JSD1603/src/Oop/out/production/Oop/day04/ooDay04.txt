回顾:
1.内存管理:JVM
  1)堆:new出来的对象(成员变量)
  2)栈:正在调用中的方法的局部变量
  3)方法区:.class字节码(方法)
2.继承:
  1)作用:避免代码重复，有利于代码的复用
  2)extends
  3)父类/基类:共有的
    子类/派生类:特有的
  4)子继承父后，子具有:父+子
  5)单一继承
  6)传递性
  7)构造子之前必须先构造父
    子类若不调父类构造，则默认super()
    子类若调了父类构造，则不再默认提供
3.super:指代当前对象的父类对象
   super.成员变量名
   super.方法名()
   super()
4.向上造型:
  1)父类型的引用指向子类的对象
  2)能点出来什么，看引用的类型


Cell
Tetromino
T
J
TJTest



笔记:
1.方法的重写(override):
  1)发生在父子类中，方法签名相同，方法体不同
  2)重写方法被调用时，看对象的类型
2.重载与重写的区别:-----常见面试题
  1)重写override:
    1.1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
    1.2)遵循"运行期"绑定，看对象的类型调用方法
  2)重载overload:
    2.1)发生在一个类中，方法名称相同，参数列表不同，方法体不同
    2.2)遵循"编译期"绑定，看引用的类型绑定调用方法
3.package:
  1)作用:避免类的命名冲突
  2)包名可以有层次结构
    完全限定名: 包名.类名
  3)建议:包名所有字母都小写
  import:
  1)声明类/引入类
  2)同包中的类可以直接访问，
    不同包中的类，不能直接访问，两种方式:
     1.1)类的完全限定名----不建议
     1.2)先import声明类，再直接访问----建议
           import 包名.类名;
4.访问控制修饰符:
  1)public:公开的，任何类
  2)private:私有的，本类
  3)protected:受保护的，本类、子类、同包类
  4)默认的:什么也不写，本类、同包类
  类的修饰: public和默认的
  类成员的修饰:如上4种都可以
5.static:静态的
  1)静态变量:
    1.1)由static修饰
    1.2)属于类的，存在方法区中，只有一份
    1.3)常常通过类名.来访问(*实例也可以访问)
    1.4)何时用:所有对象的数据都一样
  2)静态方法:
    2.1)由static修饰
    2.2)属于类的，存在方法区中，只有一份
    2.3)常常通过类名.来访问
    2.4)静态方法中没有隐式的this传递
        所以静态方法中不能直接访问实例成员
    2.5)何时用:方法的操作仅与参数相关而与对象无关
  3)静态块:
    3.1)由static修饰
    3.2)属于类的，在类被加载期间自动执行
        因类只被加载一次，所以静态块也只执行一次
    3.3)何时用:常常用于加载/初始化静态资源(图片、音频、视频...)
6.final:不可变----单独使用的几率很小
  1)修饰变量:变量不能被改变
  2)修饰方法:方法不能被重写
  3)修饰类  :类不能被继承



任务:
1.看OverrideDemo.java:
  1)Aoo与Boo与main演示:重写的两句话
  2)Coo与Doo演示:重写的"两同两小一大"原则
2.看OverrideOverloadDemo.java:
  1)Eoo与Foo与Goo与main演示:重写与重载的区别
3.看staticDemo.java:
  1)Loo与main演示:静态变量
  2)Moo与main演示:静态方法
  3)Noo与main演示:静态块


在昨天的基础之上oo.day03_1包:
1.练习T类和J类:重写print()方法
2.自学static final常量

















任务:
1.做final的练习








static final常量-----自学内容








FinalDemo














乐视视频:
  吸血鬼日记6第1集.rm


百度音乐
音频-------大王叫我来巡山.mp4


CS游戏-----地图.png、装备、枪、炮、子弹......----图片


















drop()的操作与对象相关

Cell c1 = new Cell(2,5);
c1.drop();

Cell c2 = new Cell(5,7);
c2.drop();

Cell c3 = new Cell(1,6);
c3.drop();

class Cell{
  int row;
  int col;
  static void drop(){
    row++;
  }
}











Arrays.sort(arr); //升序----静态方法
假设sort()不是静态的

sort()的操作仅与参数相关而与对象无关

Arrays a1 = new Arrays();
a1.sort(arr);

Arrays a2 = new Arrays();
a2.sort(arr);

Arrays a3 = new Arrays();
a3.sort(arr);














double a = Math.sqrt(25); //静态方法

假设: sqrt()不是静态方法
结论: sqrt()的操作仅与参数相关，而与对象无关

Math m1 = new Math();
double a = m1.sqrt(25); //5.0

Math m2 = new Math();
double b = m2.sqrt(25); //5.0

Math m3 = new Math();
double c = m3.sqrt(25); //5.0









int a = scan.nextInt();
double b = scan.nextDouble();

double a = Math.random();
double b = Math.sqrt(25);
int[] a1 = Arrays.copyOf(a,6);
Arrays.sort(arr);















静态方法没有this传递，
没有this就意味着没有对象，
而实例成员必须对象打点来访问，
所以，静态方法不能直接访问实例成员









Aoo o = new Aoo();

class Aoo{
  int a; //实例变量
  static int b; //静态变量
  void show(){ //实例方法--有this
    a = 1;
    b = 2;
  }
  static void test(){ //静态方法--没有this
    a = 1; //编译错误
    b = 2;
  }

}


















class Cell{
  int row; //实例变量
  int col;
}








Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "廊坊";

Student ls = new Student();
ls.name = "lisi";
ls.age = 24;
ls.address = "佳木斯";


ls.className = "JSD1603";
Student.className = "JSD1603";

class Student{
  String name;
  int age;
  String address;
  static String className;
}
















成员变量:
1)实例变量:没有static修饰
           属于对象的，存在堆中
	   有几个对象就有几份
	   通过对象.来访问
2)静态变量:由static修饰
           属于类的，存在方法区中
	   只有一份
           通过类名.来访问















oo.day04.vis

Hoo
Ioo
Joo








建议: 数据私有化(private)，行为公开化(public)


class Bank{
  private String cardId; //卡号
  private String cardPwd; //密码
  private double balance; //余额

  //消费
  public boolean changeBalance(double money){
    if(balance>=money){
      balance-=money;
      return true;
    }
    return false;
  }
  
  //检查密码
  public boolean checkPwd(String pwd){
    if(pwd.equals(cardPwd)){
      return true;
    }
    return false;
  }
}













package a;
class Aoo{
}
class Boo{
  void show(){
    Aoo o = new Aoo(); //正确
  }
}

package c;
import a.Aoo; //声明Aoo
class Moo{
  void show(){
    Aoo o = new Aoo();
  }
}











package b;
class Coo{
  void show(){
    cn.tedu.stumanager.course.Java o = new cn.tedu.stu.....();
    a.Aoo o = new a.Aoo(); //正确
    Aoo o = new Aoo(); //编译错误
  }
}













建议:
  域名反写 . 项目名称   . 模块名称 . 类名
  cn.tedu  . stumanager .  course   . Java










民生银行-------上亿的资金
A公司:
  package a.b.c;
  class Aoo{
  }

B公司:
  package a.b.c;
  class Aoo{
  }








建议:











package a.b.c.d;
class Aoo{ //a.b.c.d.Aoo
}

package a.b.c.d;
class Aoo{ //m.n.o.Aoo
}












package a;
class Aoo{ //完全限定名: a.Aoo
}
class Aoo{ //完全限定名: a.Aoo
}

package b;
class Aoo{ //完全限定名: b.Aoo
}














Boo o = new Boo();
o.show();
o.show("zhangsan");

class Aoo{
  void show(){}
}
class Boo extends Aoo{
  void show(){}
  void show(String name){} //重载了
}














override与overload的区别:
1.重载:同一个类中，方法名同，参数列表不同
2.重写:父子类中，签名相同，方法体不同












子类继承父类后，
  若觉得父类的方法不符合子的要求-----重写
  若子完全修改了父的-----直接重写
  若子是在父的基础之上修改-----调父的再添加内容








Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "廊坊";
zs.className = "JSD1603";
zs.sayHi(); //zhangsan,25,廊坊

Teacher wkj = new Teacher();
wkj.name = "wangkejing";
wkj.age = 37;
wkj.address = "佳木斯";
wkj.salary = 5000;
wkj.sayHi(); //wangkejing,37,佳木斯

class Person{
  String name;
  int age;
  String address;
  void sayHi(){
    System.out.println(name+","+age+","+address);
  }
}
class Student extends Person{
  String className;
  void sayHi(){
    System.out.println(name+","+age+","+address+","+className);
  }
}
class Teacher extends Person{
  double salary;
  void sayHi(){
    System.out.println(name+","+age+","+address+","+salary);
  }
}
class Doctor extends Person{
  String level;
}














