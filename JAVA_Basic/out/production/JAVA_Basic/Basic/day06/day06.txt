回顾:
1.更佳适用情况
    while:"当"
    do...while:"直到"
    for:固定次数，应用率最高
2.嵌套循环
    循环中套循环，多行多列
    外层走一次，内层走所有次
    层数越少越好
    break只能跳出一层循环
3.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)int[] arr = new int[4];
  4)int[] arr = new int[4];
    int[] arr = {3,6,78,8};
    int[] arr = new int[]{3,6,78,8};
  5)int[] arr = new int[3];
    System.out.println(arr.length);
    arr[0] = 100;
    arr[arr.length-1] = 500;
    arr[3] = 300; //异常
  6)for(int i=0;i<arr.length;i++){
      arr[i] = 100;
      System.out.println(arr[i]);
    }
  7)System.arraycopy(a,1,a1,0,4);
    int[] a1 = Arrays.copyOf(a,6);
    a = Arrays.copyOf(a,a.length+1);
  8)Arrays.sort(arr); //升序
    冒泡:
      8.1)4个数冒3轮
      8.2)每轮都从第1个数开始比
          每次都是与它的下一个元素比
      8.3)冒出来的数就不再参与比较了


long a = System.currentTimeMillis();
冒泡
long b = System.currentTimeMillis();

System.out.println(b-a); //排序消耗的时间



8%2==0
8%4==0

100
   2/3/4/.../98/99
   2/3/4/.../49/50
   2/3/4/.../9/10


100的平方根是10
81的平方根是9
36的平方根是6
25的平方根是5


Math.sqrt(36);















int num = 5;


质数:又称素数，只能被1和它本身整除的数

结论:
1)是质数:取余所有都不得0
2)不是质数:只要有得0的


并非一次判断就能得到最终结果----开关


5是质数:
  5%2/3/4-------------都不得0
7是质数:
  7%2/3/4/5/6---------都不得0
8不是质数:
  8%2/3/4/5/6/7-------有得0的
9不是质数:
  9%2/3/4/5/6/7/8-----有得0的











正课:
1.方法:函数、过程
  1)用于封装一段特定的逻辑功能
  2)尽可能的独立，一个方法只干一件事
  3)方法可以被调用多次
  4)有利于代码的重用，便于维护
    有利于团队协作开发
2.方法的定义:
   修饰词 返回值类型 方法名(参数列表){
     方法体
   }
3.方法的调用:
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量=方法名(有参传参);
              方法名(有参传参); //不建议
4.return的用法:
  1)return 值; //1.1)结束方法的执行 
               //1.2)返回结果给调用方
  2)return; //2.1)结束方法的执行--后期会有实际应用


















猜字符小游戏:
一.设计数据结构:数怎么存
1.char[] chs; //随机生成的字符数组
2.char[] input; //用户输入的字符数组
3.int[] result; //对比的结果
4.int score; //得分
  int count; //猜错的次数

二.设计程序结构:方法
1.主方法:
  public static void main(String[] args){
    //...
  }
2.随机生成字符数组:
  public static char[] generate(){
    char[] chs = new char[5];
    //...
    return chs;
  }
3.对比:随机字符数组与用户输入的字符数组
  public static int[] check(char[] chs,char[] input){
    int[] result = new int[2];
    //...
    return result;
  }

三.设计算法:


任务:
  1.独立完成Guessing猜字符小游戏













exit时退出循环






int a = scan.nextInt();
double b = scan.nextDouble();
String str = scan.next();
char[] input = str.toCharArray();

ABCDE
input[0]='A'
input[1]='B'
input[2]='C'







Math.random()-----0.0到0.9999999...



public static char[] generate(){
  char[] chs = new char[5];
  
  char[] letters = {'A','B','C',...,'Z'};
  boolean[] flags = new boolean[letters.length]; //开关数组
  for(int i=0;i<chs.length;i++){
    do{
      int index = (int)(Math.random()*26); //0到25
    }while(flags[index]==true);
    chs[i] = letters[index];
    flags[index] = true;
  }
  i=0 index=0  chs[0]='A' flags[0]=true
  i=1 index=25 chs[1]='Z' flags[25]=true
  i=2 index=0/25/0/25/0/25/1 chs[2]='B' flags[1]=true
  i=3 index=0/25/1

  return chs;
}

i=0 index=0  chs[0]='A'
i=1 index=25 chs[1]='Z'
i=2 index=1  chs[2]='B'
i=3
i=4


1)问:判断一次还是判断多次
  答:多次-----选择循环
2)问:固定次数还是不固定次数
  答:不固定-----选择while或do...while
3)问:第1要素与第3要素相同不
  答:相同-----选择do...while










i=0
  j=0 chs0和input0
  j=1 chs0和input1
  j=2 chs0和input2
  j=3 chs0和input3
  j=4 chs0和input4
i=1
  j=0 chs1和input0
  j=1 chs1和input1
  j=2 chs1和input2
  j=3 chs1和input3
  j=4 chs1和input4
i=2
  j=0 chs2和input0
  j=1 chs2和input1
  j=2 chs2和input2
  j=3 chs2和input3
  j=4 chs2和input4

位置对是在字符对的基础之上

如果位置对为5，则字符对为5

public static int[] check(char[] chs,char[] input){
  int[] result = new int[2]; //0,0--假设result[1]为字符对 result[0]为位置对
  
  for(int i=0;i<chs.length;i++){
    for(int j=0;j<input.length;j++){
      if(chs[i]==input[j]){ //字符对
        result[1]++; //字符对个数增1
	if(i==j){ //位置对
	  result[0]++; //位置对个数增1
	}
	break;
      }
    }
  }

  return result;
}




















public static void main(String[] args){
  say();
  sayHi("zhangsan");
  int a = getNum();  输出a
  double b = plus(5.8,3.4); 输出b
}
public static void say(){}
public static void sayHi(String name){}
public static int getNum(){
  return 8;
}
public static double plus(double a,double b){
  return a+b;
}


阶段项目对于你们来说，都不简单
讲的原因--------


吃药
吃糖豆


while(){
}

for(1;2;3){
}













检查密码(){
}
存(){
  调检查密码();
}
取(){
  调检查密码();
}
转(){
  调检查密码();
}
查(){
  调检查密码();
}










方法可以有参，也可以无参，小括号不能省
有参可以使方法更灵活


MethodDemo

System.out.        println("HelloWorld");
System.            arraycopy(a,1,a1,0,4);
Arrays.            sort(arr); 
double d = Math.   sqrt(25);
int[] a1 = Arrays. copyOf(a,6);


int a    = scan.   nextInt();
double b = scan.   nextDouble();
double c = Math.   random();



double d = Math.sqrt(100);
double c = Math.random();


sqrt()方法，想求谁的平方根就求谁的平方根
random()方法，只能得0到0.99999..的随机数

假设random()有参:
double c = Math.random(1,1000);
double c = Math.random(0,99);
double c = Math.random(10,55);







自己定义方法

方法可以有返回值，也可以没有返回值
没有返回值，则写成void
有返回值，则写成具体的类型


System.out.println("HelloWorld");
System.arraycopy(a,1,a1,0,4);
Arrays.sort(arr); //无返回值

int a    = scan.nextInt();
double b = scan.nextDouble();
double c = Math.random();
double d = Math.sqrt(25);
int[] a1 = Arrays.copyOf(a,6); //有返回值













团队有5个人
main(){
  
}







冒泡算法------方法中bubbleSort()

10个地方要排序











a(){
  存钱
}
b(){
  取钱
}
c(){
  转帐
}

张三------调a,b,c
李四------调b
王五------调a







main(){
  调存钱----1行
  调取钱----1行
  调转帐----1行
}
存钱(){
  500行
}
取钱(){
  500行
}
转帐(){
  1000行
}








