回顾:
1.方法:
    封装一段特定的逻辑功能
    尽可能独立，一个方法只干一件事
    可以被反复调用多次
    避免代码重复，便于维护，团队合作开发
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
      方法体
    }
3.方法的调用:
    无返回值: 方法名(有参传参);
    有返回值: 数据类型 变量 = 方法名(有参传参);
              方法名(有参传参);----一般不这样做
4.return:
    return 值; //1.结束方法的执行 2.返回值给调用方
    return; //1.结束方法的执行



public static int[] generateArray(int len,int max){
  int[] arr = new int[len];
  for(int i=0;i<arr.length;i++){
    arr[i] = (int)(Math.random()*max);
  }
  return arr;
}







笔记:
1.什么是类?什么是对象?
  1)现实世界是由很多很多对象组成的
    基于对象抽出类
  2)对象:真实存在的单个个体
    类:类型、类别，代表一类个体
  3)类中可以包含:
    3.1)所有对象所共有的特性/属性---变量
    3.2)所有对象所共有的行为--------方法
  4)一个类可以创建多个对象
    同一类的对象，结构相同，数据不同
  5)类是对象的模板，对象是类的具体的实例
2.如何创建类?如何创建对象?
3.引用类型之间画等号:
  1)指向了同一个对象
  2)对其中一个引用的修改会影响另外一个
    eg: 房门钥匙
  基本类型之间画等号:
  1)赋值
  2)对其中一个变量的修改不会影响另外一个
    eg: 身份证复印件
4.null:空，意为没有指向任何对象
       若引用的值为null，则不能再进行任何操作了，
       若操作则空指针异常NullPointerException


练习:
1.练习引用之间画等号
2.练习null和NullPointerException



任务:
1.创建Cell格子类:
    包含:row,col
         drop(),moveLeft(),getCellInfo()
  创建CellTest测试类:
    要求:原始数据:打墙+打格(单独的方法中)
         下落之后:打墙+打格
	 左移之后:打墙+打格
2.创建Student学生类:
    包含:name,age,address
         study(),sayHi()
  创建StudentTest测试类
    要求:创建Student对象
         给成员变量赋值，并调用方法
3.完成经典案例--打印员工信息













房子:对象
钥匙:引用
配一把钥匙:引用














Cell c = new Cell();




main(){
  test(5); //int num = 5;

  int a=5;
  test(a); //int num = 5;
}

public static void test(int num){
}





            引用
类      引用类型变量  指向   对象
Student    zs           =   new Student();













int     a; //基本类型变量(简称变量)
Student b; //引用类型变量(简称引用)












new Cell();
new Cell();
new Cell();

Student zs = new Student();
new Student();
new Student();

zs.name = "zhangsan";
zs.age = 25;
zs.address = "廊坊";



name/age/address-----赋值










1)找对象:很多很多很多小格子
2)抽类:格子类
3)设计类中的成员变量和方法:
4)创建对象并测试:


Cell
CellTest



class Cell{ //格子类
  int row; //行号
  int col; //列号
  void drop(){ //下落1格
    row++;
  }
  void moveLeft(int n){ //左移n格
    col-=n;
  }
  String getCellInfo(){ //获取行号和列号
    return row+","+col;
  } 
}













前4天课程------俄罗斯方块








oo.day01
Student
StudentTest




Student zs = new Student();
Student ls = new Student();
Student ww = new Student();
Student zl = new Student();


Student zs = new Student();
zs.name = "zhangsan";
zs.age = 26;
zs.className = "JSD1603";
zs.stuId = "001";
zs.eat();
zs.sleep();
zs.study();
zs.abc = 345; //编译错误

Student ls = new Student();
ls.name = "lisi";
ls.age = 27;
ls.className = "JSD1603";
ls.stuId = "007";
ls.eat();
ls.sleep();
ls.study();
ls.tt = 56; //编译错误

class Student{ //学生类
  String name;
  int age;
  String className;
  string stuId;
  void eat(){}
  void sleep(){}
  void study(){}
}









class Teacher{ //老师类
  String name;
  int age;
  String address;
  double salary;
  void eat(){}
  void sleep(){}
  void teach(){}
}



class Dog{ //小狗类
  String name;
  int age;
  String type;
  double price;
  String color;
  void eat(){}
  void sleep(){}
  void play(){}
}

class Car{ //汽车类
  String type;
  double price;
  String color;
  String id;
  void run(){}
  void stop(){}
  void back(){}
}



对象          老师
WKJ
ZW
XY



zhangsan      学生
lisi
wangwu



小花          狗
小黑
小强


马自达        汽车
奥迪
奥拓




















数据结构:
1.基本数据类型----1个数
2.数组----多个数(类型相同)
3.自己造一个数据类型-----多个数(类型可以不同)


面向过程的缺陷:
1.缺乏对数据的封装
2.数据和方法(操作数据)的分离


class Emp{ //Emp就是自己造的数据类型名字
  String name;
  int age;
  double salary;
  void print(){
    System.out.println("姓名:"+name);
    System.out.println("年龄:"+age);
    System.out.println("工资:"+salary);
  }
}

class Chapter9_Closure.Demo{
  public static void main(String[] args){
    Emp e = new Emp(); //创建一个Emp的对象
    e.name="zhangsan";
    e.age=26;
    e.salary=5000;
    e.print();
  }
  public static void print(Emp e){
    System.out.println("姓名:"+e.name);
    System.out.println("年龄:"+e.age);
    System.out.println("工资:"+e.salary);
  }
}




















晕乎乎的------------------正常的

不晕不正常:
1.完全不会
2.自以为不晕-------非常好非常好的情况










语言基础:
1.固定
2.去银行取钱
3.猜字符游戏

面向对象:
1.抽象
2.向着社会主义社会发展
3.飞机大战


好的程序:
  可维护性好，可扩展性好，
  复用性好，可移植性好，
  性能好，健壮性好.....




面向过程:
面向对象:
面向接口:




