回顾:
1.重写Override:
  1)父子类，方法签名相同，方法体不同
  2)重写方法被调用时，看对象的类型
2.重写与重载的区别:
  1)重写:父子类，方法签名相同，方法体不同
         运行期绑定，看对象
  2)重载:一个类，方法名相同，参数列表不同
         编译期绑定，看引用
3.package和import
4.访问控制修饰符:
  public:公开的，任何类
  private:私有的，本类
  protected:受保护的，本类、子类、同包类
  默认的:什么也不写，本类、同包类
5.static:静态的
  1)静态变量:
      static，属于类，方法区，一份，类名.
      所有对象数据都一样，只有一份
  2)静态方法:
      static，属于类，方法区，一份，类名.
      没有隐式的this，不能直接访问实例成员
      方法的操作仅与参数相关而与对象无关
  3)静态块:
      static，属于类，类被加载期间自动执行，一次
      常常用于加载静态资源
6.final:不可变的
  1)修饰变量:变量不能被改变
  2)修饰方法:方法不能被重写
  3)修饰类  :类不能被继承


package a;
class Aoo{
}

package b;
class Aoo{
}

package c;
class Moo{
  void show(){
    a.Aoo o = new a.Aoo();
    b.Aoo o1 = new b.Aoo();
  }
}










笔记:
1.static final常量:
  1)必须声明同时初始化
  2)通过类名.来访问，不能被改变
  3)建议:常量名所有字母都大写
  4)在编译时被直接替换为具体的值--效率高
2.抽象方法:
  1)由abstract修饰
  2)只有方法的定义，没有方法的具体实现(连大括号都没有)
3.抽象类:
  1)由abstract修饰
  2)包含抽象方法的类必须是抽象类
    不包含抽象方法的类也可以声明为抽象类-----我愿意
  3)抽象类不能被实例化
  4)抽象类是需要被继承的，子类:
    4.1)重写抽象类中的所有抽象方法---建议方式
    4.2)也声明为抽象类----一般不这样做
  5)抽象类的意义:
    5.1)封装子类所共有的数据和方法，被子类共用
    5.2)为所有子类提供了一种统一的类型--向上造型
    5.3)包含抽象方法，为所有子类提供一个统一的入口
4.接口:
  1)是一个标准、规范
    遵守了这个标准，就能干某件事----API之后
  2)由interface定义
  3)只能包含常量和抽象方法
  4)接口不能被实例化
  5)接口是需要被实现/继承的，实现类/子类:
      必须重写接口中的所有!!抽象方法
  6)一个类可以实现多个接口，用逗号隔开
    若又继承又实现时，要先继承后实现
  7)接口可以继承接口


接口是对继承的单根性的扩展(支持多实现)





今天任务:
1.创建oo.day06包
    要求:把今天银行卡系统的代码----重写一次

周末任务:
1.一周的经典案例重做一次
2.自学:
    抽象类与接口的区别是什么?
    答：
      你选择使用接口和抽象类的依据是什么？
      接口和抽象类的概念不一样。接口是对动作的抽象，抽象类是对根源的抽象。
      抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人，女人，这两个类（如果是类的话……），他们的抽象类是人。
      说明，他们都是人。
      人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让这些类去实现它.
      所以，在高级语言上，一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。
      总结几句话来说：
              特征：
              1、抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。
              2、抽象类要被子类继承，接口要被类实现。
              3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现
              4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
              5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。
                 同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。(继承抽象类、实现接口都要全部实现抽象方法！)
              6、抽象方法只能申明，不能实现，接口是设计的结果 ，抽象类是重构的结果
              7、抽象类里可以没有抽象方法
              8、如果一个类里有抽象方法，那么这个类只能是抽象类
              9、抽象方法要被实现，所以不能是静态的，也不能是私有的。
              10、接口可继承接口，并可多继承接口，但类只能单根继承。
              区别：
              1.抽象类 和 接口 都是用来抽象具体对象的. 但是接口的抽象级别最高
              2.抽象类可以有具体的方法 和属性,  接口只能有抽象方法和不可变常量
              3.*抽象类主要用来抽象类别,接口主要用来抽象功能.
              4.抽象类中，且不包含任何实现，派生类必须覆盖它们。接口中所有方法都必须是未实现的。
    何时用抽象类？何时用接口?
    答：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。
      抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。*在这个类中，
      你必须继承或编写出其所有子类的所有共性。
      虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。

      接口的使用
      接口：interface
      在PHP中，我们可以规定，一个对象应该具有哪些公共的外部操作，即可使用interface来规定。
      公共的方法就是接口。用于规定一个对象应该用于哪些公共的操作方法（接口），这个也叫接口（公共操作方法的集合）
      即：接口（interface结构，公共方法集合）

      公共方法（接口方法）
      定义：用于限定某个对象所必须拥有的公共操作方法的一种结构，称之为接口（interface）
      语法：定义接口结构，使用interface关键字。接口内定义的都是一些公共方法。

      注意：
      1.接口方法，访问权限必须是公共的 public
      2.接口内只能有公共方法，不能存在成员变量
      3.接口内只能含有未被实现的方法，也叫抽象方法，但是不用abstract关键字。

      类实现接口，利用关键字implements完成。
      这样，实现该接口的类，必须实现接口内所有的抽象方法。而且可以肯定，该方法一定是公共的外部操作方法。
      多实现：该功能，在理论上可以通过抽象类来实现，但是抽象类，不专业。
      使用接口则专业些，实现上，因为php支持多实现，而仅支持单继承。
      php对象接口的支持，可以定义类常量，接口之间也可以继承

      抽象方法和抽象类

      在OOP 语言中，一个类可以有一个或多个子类，而每个类都有至少一个公有方法做为
      外部代码访问其的接口。而抽象方法就是为了方便继承而引入的，我们先来看一下抽象类和
      抽象方法的定义再说明它的用途。
      什么是抽象方法？我们在类里面定义的没有方法体的方法就是抽象方法，所谓的没有方
      法体指的是，在方法声明的时候没有大括号以及其中的内容，而是直接在声明时在方法名后
      加上分号结束，另外在声明抽象方法时还要加一个关键字“abstract”来修饰；
      例如：
      abstract function fun1();
      abstract function fun2();
      上例是就是“abstract”修饰的没有方法体的抽象方法“fun1()”和“fun2()”，不要忘记
      抽象方法后面还要有一个分号；那么什么是抽象类呢？只要一个类里面有一个方法是抽象方
      法，那么这个类就要定义为抽象类，抽象类也要使用“abstract”关键字来修饰；在抽象类里
      面可以有不是抽象的方法和成员属性，但只要有一个方法是抽象的方法，这个类就必须声明
      为抽象类，使用“abstract”来修饰。

       http://hovertree.com/menu/php/

      上例中定义了一个抽象类“Chapter9_Closure.Demo”使用了“abstract”来修饰，在这个类里面定义了一
      个成员属性“$test”，和两个抽象方法“fun1”和“fun2”还有一个非抽象的方法fun3()；那
      么抽象类我们怎么使用呢？最重要的一点就是抽象类不能产生实例对象，所以也不能直接使
      用，前面我们多次提到过类不能直接使用，我们使用的是通过类实例化出来的对象，那么抽
      象类不能产生实例对象我们声明抽象类有什么用呢？我们是将抽象方法是做为子类重载的模
      板使用的，定义抽象类就相当于定义了一种规范，这种规范要求子类去遵守，子类继函抽象
      类之后，把抽象类里面的抽象方法按照子类的需要实现。子类必须把父类中的抽象方法全部
      都实现，否则子类中还存在抽象方法，那么子类还是抽象类，还是不能实例化对；为什么我
      们非要从抽象类中继承呢？因为有的时候我们要实现一些功能就必须从抽象类中继承，否则
      这些功能你就实现不了，如果继承了抽象类，就要实现类其中的抽象方法；














UnionPayTest








interface UnionPay{ //银联接口
  void 存();
  void 取();
  void 查询余额();
  void 转帐();
}
interface ICBC extends UnionPay{ //工行
  void 在线支付();
}
interface ABC extends UnionPay{ //农行
  void 支付电话费();
}

class ICBCImpl implements ICBC{ //工行卡
  public void 存(){}
  public void 取(){}
  public void 查询余额(){}
  public void 转帐(){}
  public void 在线支付(){}
}
class ABCImpl implements ABC{ //农行卡
  public void 存(){}
  public void 取(){}
  public void 查询余额(){}
  public void 转帐(){}
  public void 支付电话费(){}
}



if(balance-number==0)-------钱正好够
if(balance-number>100)------取完钱之后多100
if(balance-number>-2000)----取完钱之后少2000



double num = input.nextDouble();











类和类-----------extends
接口和接口-------extends
类和接口---------implements

extends-------同类型的
implements----不同类型的


Inter1 o1 = new Inter1(); //编译错误

Inter2 o2 = new Aoo(); //向上造型
Inter1 o3 = new Aoo();

interface Inter1{
  void a();
}
interface Inter2 extends Inter1{
  void b();
}
class Aoo implements Inter2{
  public void b(){}
  public void a(){}
}













interface Inter1{
  void a();
}
interface Inter2{
  void b();
}
abstract class Aoo{
  abstract void c();
}
class Boo extends Aoo implements Inter1,Inter2{
  public void a(){}
  public void b(){}
  void c(){}
}






interface Inter1{
  void a();
  void b();
}
class Aoo implements Inter1{
  public void a(){}
  public void b(){}
}






interface Inter1{ //不完整
  public static final int NUM=5;
  public abstract void show();

  double PI=3.14159; //默认public static final
  void test(); //默认public abstract

  int a; //编译错误
  void say(){} //编译错误
}









现实生活中的接口:
1)电脑厂商做了USB接口-----制定标准、规范
  U盘、鼠标、摄像头等等---遵守标准、规范
2)国家对商品房------------制定标准、规范
  国家对家具、家电--------制定标准、规范
  开发商、家具家电厂商----遵守标准、规范
3)银行--------------------制定标准、规范
  银行卡------------------遵守标准、规范



















存款，取款，转帐，支付电话费----农行













new Tetromino(); //编译错误

new T();
new J();
new O();

abstract class Tetromino{ //我愿意
  Cell[] cells;
  void drop(){
  }
  void moveLeft(){
  }
  void moveRight(){
  }
  void print(){
  }
}
class T extends Tetromino{
}
class J extends Tetromino{
}
class O extends Tetromino{
}




ShapeTest，包含main，把注释删掉



我讲你能听得懂但写不出来-------不需要留级










凡是动物都能run()，但是每个动物具体的行为是不一样的



abstract class Animal{
  abstract void run();
}
class Bird extends Animal{
  void run(){
    在天上飞
  }
}
class Tiger extends Animal{
  void run(){
    在地上跑
  }
}
class Fish extends Animal{
  void run(){
    在水里游
  }
}


给我一组图形，求这一组图形的最大面积
Square[] ss = new Square[3];
ss[0] = new Square(1);
ss[1] = new Square(2);
ss[2] = new Square(3);

Circle[] cs = new Cricle[3];
cs[0] = new Circle(1);
cs[1] = new Circle(2);
cs[2] = new Circle(3);

Six[] sixes = new Six[3];
sixes[0] = new Six(1);
sixes[1] = new Six(2);
sixes[2] = new Six(3);

1)找到ss中的最大面积sMax
2)找到cs中的最大面积cMax
3)找到sixes中的最大面积sixMax
4)找到sMax与cMax与sixMax中的最大值max



假设:我将9个图形都能装在一个数组中

new Shape(); //编译错误
Shape s = new Square(1); //向上造型
Shape s = new Circle(1);
Shape s = new Six(1);



Shape[] shapes = new Shape[9]; //创建Shape数组对象
shapes[0] = new Square(1);
shapes[1] = new Square(2);
shapes[2] = new Square(3);
shapes[3] = new Circle(1);
shapes[4] = new Circle(2);
shapes[5] = new Circle(3);
shapes[6] = new Six(1);
shapes[7] = new Six(2);
shapes[8] = new Six(3);

1)能点出来什么，看引用的类型
2)重写方法被调时，看对象的类型

double max = shapes[0].area();
for(int i=1;i<shapes.length;i++){
  double area = shapes[i].area();
  if(area>max){
    max=area;
  }
}
System.out.println("最大面积为:"+max);
Shape s1  = new Circle();
Shape s2  = new Square();


Circle s2 = new Circle();

abstract class Shape{ //抽象类-不完整
  double c;
  abstract double area(); //抽象方法-不完整
}
class Square extends Shape{
  double area(){ //重写--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extend Shape{
  double area(){
    return 0.0796*c*c;
  }
}



















Shape s; //正确
new Shape(); //编译错误

abstract class Shape{ //抽象类--不完整
  double c;
  abstract double area(); //抽象方法--不完整
}

class Square extends Shape{ //方形
  double area(){ //重写--变不完整为完整
    return 0.0625*c*c;
  }
}
class Circle extends Shape{ //圆形
  double area(){
    return 0.0796*c*c;
  }
}








abstract class Six extends Shape{ //六边形
}


new Car();

abstract class Car{
  ...
  abstract void stop();
}
















