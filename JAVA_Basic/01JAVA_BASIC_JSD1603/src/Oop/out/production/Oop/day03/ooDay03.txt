回顾:
1.方法的重载(overload):
  1)同一个类中，方法名相同，参数列表不同
  2)编译器在编译时会根据签名自动绑定调用的方法
2.构造方法:
  1)常常用于给成员变量赋初值
  2)与类同名，没有返回值类型
  3)创建对象时被自动调用
  4)自己不写，默认无参的，自己写了，则不再默认提供
  5)重载
3.this:指代当前对象，哪个对象调指的就是哪个对象
       方法中访问成员变量之前默认有个this.
  用法:
    this.成员变量名
    this.方法名()
    this()
4.引用类型数组:


Cell[] cells = new Cell[4];
cells[0] = new Cell(1,5);

int[][] arr = new int[3][];
arr[0] = new int[2];

int[][] arr = new int[3][4];


class O{
  Cell[] cells;
  O(){
    this(0,0);
  }
  O(int row,int col){
    cells = new Cell[4];
    cells[0] = new Cell(row,col);
    cells[1] = new Cell(row,col+1);
    cells[2] = new Cell(row+1,col);
    cells[3] = new Cell(row+1,col+1);
  }
  void drop(){
  }
  void moveLeft(){
  }
  void moveRight(){
  }
  void print(){
  }
}








笔记:
1.内存管理:由JVM管理----了解
  1)堆:
    1.1)new出来的对象(包括成员变量)
    1.2)成员变量的生命周期:
          创建对象时存在堆中，对象被回收时一并消失
    1.3)没有任何引用指向的对象即为垃圾
        垃圾回收器(GC)不定时清理垃圾
	回收的过程是透明的，并不是一看到垃圾就马上回收
	通过调用System.gc()可以建议快一些来回收
    1.4)内存泄露:不再使用的对象没有被及时的回收，严重的话会导致程序的崩溃
                 所以建议:不再使用的对象及时将引用设置为null
      
  2)栈:
    2.1)用于存储正在调用方法中的局部变量
    2.2)调用方法时，在栈中为该方法分配对应的栈桢，
        栈桢中存储该方法的所有局部变量，
	方法调用结束时，栈桢被清除，局部变量一并消失
    2.3)局部变量的生命周期:
          调用方法时存在栈中，方法调用结束时一并消失
  3)方法区:
    3.1)用于存储.class字节码文件(包括方法)
    3.2)方法只有一份，存在方法区中
        通过this来区分到底是哪个对象调用的方法
2.继承:
  1)作用:避免代码重复，有利于代码的复用
  2)通过extends实现继承
  3)父类:所有子类所共有的属性和行为
    子类:子类所特有的属性和行为
  4)子类继承父类后，子类具有:
      子类+父类
  5)一个父类可以有多个子类
    一个子类只能有一个父类----单一继承
  6)具有传递性
  7)java规定:构造子类之前必须先构造父类
    若子类中没有通过super调用父类的构造方法，
    则编译器默认super()调父类无参构造
    若自己调了，则不再默认提供
    super调用父类构造必须位于子类构造的第1句
3.super:指代当前对象的父类对象
  super的用法:
   1)super.成员变量名----访问父类的成员变量
   2)super.方法名()------调用父类的方法
   3)super()-------------调用父类的构造方法
4.向上造型:
  1)父类型的引用指向子类的对象
  2)能点出来什么，看引用的类型


任务:
1.在oo.day03_1包中:
  创建类UpDemo，包含main，把注释删掉:
  要求:在同一文件中
    1)创建类Aoo，包含a和show()
    2)创建类Boo，继承Aoo，包含b和test()
    3)在main()方法中:
      3.1)创建父型引用指向父型对象，访问成员
      3.2)创建子型引用指向子型对象，访问成员
      3.3)创建父型引用指向子型对象，访问成员
2.在oo.day03_1包中:
  1)创建Cell类
  2)创建Tetromino类
  3)创建T类
  4)创建J类
  5)创建TJTest类，包含main














Tetromino o1 = new T(); //向上造型
Tetromino o2 = new J();
Tetromino o3 = new O();
Tetromino o4 = new L();













Person p1 = new Student();
Person p2 = new Teacher();
Person p3 = new Doctor();








Animal o1 = new Tiger();
Animal o2 = new Cat();
Animal o3 = new Dog();







何时打*:只要ij与格子坐标匹配，就打*
何时打-:与4个格子都没配上，才打-

四个格子坐标-----25,26,27,36
假设i=2,j=7
并非一次判断得到最终结果-----开关



for(int i=0;i<20;i++){
	for(int j=0;j<10;j++){
		if(i==t.cells[0].row && j==t.cells[0].col
		   ||
		   i==t.cells[1].row && j==t.cells[1].col
		   ||
		   i==t.cells[2].row && j==t.cells[2].col
		   ||
		   i==t.cells[3].row && j==t.cells[3].col){
			System.out.print("* ");
		}else{
			System.out.print("- ");
		}
	}
	System.out.println();
	}


继承要符合is a的关系



//动物是动物
Animal o1 = new Animal();
//老虎是老虎
Tiger o2 = new Tiger();
//老虎是动物
Animal o3 = new Tiger();


//动物是老虎----不合理的
Tiger o4 = new Animal(); //编译错误


class Animal{ //动物类
}
class Tiger extends Animal{ //老虎类
}













T型的参数只能接收T型对象
J型的参数只能接收J型对象
O型的参数只能接收O型对象
L型的参数只能接收L型对象
I型的参数只能接收I型对象
S型的参数只能接收S型对象
Z型的参数只能接收Z型对象

假设:
  有一种类型，既能接收T型对象
              也能接收J型对象
	      也能接收O型对象
	      也能接收L型对象
	      也能接收I型对象
	      也能接收S型对象
	      也能接收Z型对象














今天的案例就一个:
1.用继承实现
2.打墙+打T型
3.


打墙+打格


printWall(Cell[] cells){
}

print(String name,int age,String address){
}










Tetromino















Coo o = new Coo();
o.c = 1;
o.b = 2;
o.a = 3;

class Aoo{
  int a;
}
class Boo extends Aoo{
  int b;
}
class Coo extends Boo{
  int c;
}










Student zs = new Student();
zs.className/study();
zs.name/age/address/eat()/sleep();

class Person{ //人----父类
  String name;
  int age;
  string address;
  void eat(){}
  void sleep(){}
}

class Student extends Person{ //子类
  String className;
  void study(){}
}
class Teacher extends Person{ //子类
  double salary;
  void teach(){}
}
class Doctor extends Person{ //子类
  String level;
  void cut(){}
}



程序中的继承:
  代码不用自己写，自己也能用


生活中的继承:
1)继承财产:
    钱不用自己挣，自己也能花
2)继承皇位:
    江山不用自己打，自己也能坐
3)继承工作:
    工作不用自己找，自己也能干

















成员变量:有几个对象就有几份
方法:只有一份

Cell c = new Cell();
c.row = 2;
c.drop(); //c.row=3

Cell cc = new Cell();
cc.row = 5;
cc.drop(); //cc.row=6

问:drop()方法中，如何区分到底是c还是cc
答:this

方法只有一份


class Cell{
  int row;
  int col;
  void drop(){}
  void moveLeft(){}
  void moveRight(){}
  String getCellInfo(){}
}











成员变量:
1)类中，方法外
2)创建对象时存在堆中，对象被回收时消失
3)有默认值
局部变量:
1)方法中
2)调用方法中存在栈中，方法调用结果时消失
3)没有默认值，必须显式初始化



















Aoo o = new Aoo();
o.show(4);
class Aoo{
  int a;
  void show(int b){
    int c;
    System.out.println(a); //0
    System.out.println(c); //编译错误
  }
}
















成员变量: 类中，方法外
局部变量: 方法中

 





C++

java-----自动垃圾回收
         GC(垃圾回收器)



















java程序，内存不够----JVM
中关村买4G内存，装到电脑上
------结果:内存不够
------解决:扩大JVM的内存




