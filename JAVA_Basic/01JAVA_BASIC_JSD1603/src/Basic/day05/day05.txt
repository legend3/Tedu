回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所改变的那个量
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               第1要素与第3要素相同时首选
  3)for:应用率最高



正课:
1.三种循环结构的更佳适用情况:
  1)while:"当..."循环
  2)do...while:"直到..."循环
               第1要素与第3要素相同时首选
  3)for:固定次数循环，应用率最高
2.嵌套循环:
  1)循环中套循环，一般多行多列时使用
    一般外层控制行，内层控制列
  2)执行原理:
      外层循环走一次，内层循环走所有次
  3)循环层数越少越好，能用一层就不用两层，
    如果超三层循环来实现，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  算法:解决问题的流程/步骤--顺序、分支、循环
  数据结构:将数据按照某种特定的结构来保存--数怎么存
  设计合理的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[4];
  4)数组的初始化:
      int[] arr = new int[3]; //0,0,0
      int[] arr = {1,4,7}; //1,4,7
      int[] arr = new int[]{1,4,7}; //1,4,7
      int[] arr;
      arr = {1,4,7}; //编译错误
      arr = new int[]{1,4,7}; //正确
  5)数组的访问:
    5.1)通过数组名.length来获取数组的长度
          int[] arr = new int[3];
	  System.out.println(arr.length); //3
    5.2)通过下标/索引来访问数组中的元素
        下标从0开始，最大到arr.length-1
	  int[] arr = new int[3];
	  arr[0] = 100;
	  arr[1] = 200;
	  arr[2] = 300;
	  arr[3] = 400; //数组下标越界异常
	  arr[arr.length-1] = 800; //给最后一个元素赋值为800
	  System.out.println(arr[arr.length-1]);
  6)数组的遍历:
      int[] arr = new int[4];
      for(int i=0;i<arr.length;i++){
        arr[i] = 100;
      }
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){
        System.out.println(arr[i]);
      }
  7)数组的复制:
      System.arraycopy(a,1,a1,0,4);
      int[] a1 = Arrays.copyOf(a,6);
      a = Arrays.copyOf(a,a.length+1);
  8)数组的排序:
      Arrays.sort(arr); //升序
      冒泡工作原理:
        8.1)四个数冒三轮
        8.2)每一轮都是从第1个元素开始比
            每一次都是和它的下一个元素比
        8.3)冒出来的就不再参与比较了




任务:




















    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次

int[] arr = {56,8,23,1}; //升序
for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //控制每轮比较的次数
    if(arr[j]>arr[j+1]){ //每次和它下一个比
      int t=arr[j]; //交换
      arr[j]=arr[j+1];
      arr[j+1]=t;
    }
  }
}






第一轮:
  56和8比，换，8,56,23,1
  56和23比，换，8,23,56,1
  56和1比，换，8,23,1,56------56冒出来了
第二轮:
  8和23比，不换
  23和1比，换，8,1,23,56------23冒出来了
第三轮:
  8和1比，换，1,8,23,56-------8冒出来了


















----数据不同，排序的优劣也不同


随机生成几百万个数据

这几百万数据-------插入排序最快
那几百万数据-------冒泡排序最快
再几百万数据-------快速排序最快













int[] a = {10,20,30,40,50};
int[] a1 = new int[6]; //0,0,0,0,0,0




for(int i=0;i<a.length;i++){
  a1[i] = a[i];
}

a1[0] = a[0];
a1[1] = a[1];
a1[2] = a[2];
a1[3] = a[3];
a1[4] = a[4];









      
找最大值的算法:
1.假设第1个元素为最大值
  int max = arr[0];
2.遍历剩余元素，将剩余元素与max比较，
  符合条件则修改max的值为较大的
  for(int i=1;i<arr.length;i++){
    if(arr[i]>max){
      max=arr[i];
    }
  }




int[] arr = {25,34,56,8};
max=25/34/56








课上已经记住了很多很多东西


听热闹



ArrayDemo


码
0-------默认值
'0'





System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
System.out.println(arr[4]);
System.out.println(arr[5]);


int[] arr = new int[80000];
for(int i=0;i<arr.length;i++){
  arr[i]----代表arr中的每一个元素
  arr[i] = 100;
}


arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
arr[4] = 100;
arr[5] = 100;
...
arr[299] = 100;







int[] arr = new int[3]; //0,0,0
arr[0]----arr中的第1个元素
arr[1]----arr中的第2个元素
arr[2]----arr中的第3个元素

arr[1] = 100;
int b  = 100;








int a=0;
int b=0;
int c=0;

b=100;










//声明布尔型数组b，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[26];












//声明浮点型数组d，包含10个元素
//每个元素都是double型，默认值为0.0
double[] d = new double[10];













//声明整型数组a，包含4个元素
//每个元素都是int型，默认值为0
int[] a = new int[4]; //0,0,0,0
















int   a; //声明整型变量a
int[] a; //声明整型数组变量a



















将书籍按出版社分类存储
------java编程思想----不会导致算法的简单

将书籍按图书类别分类存储
------java编程思想----算法是简单的












一本一本一本书的找----------算法
将1万本书按图书类别存储-----数据结构













实际需求中，
  在某种条件下跳出所有层循环的需求----几乎没有






1层和2层


6000000
for(int i=1;i<=100;i++){
  for(int j=1;j<=200;j++){
    for(int k=1;k<=300;k++){
      if(){
        break;
      }
    }
  }
}

i=1
 j=1/2/3/.../20
i=2
 j=1/2/3/.../20










1*9=9   2*9=18  3*9=27  







反复干事，考虑用循环结构
固定次数，考虑用for循环
不固定次数，考虑用while和do...while
第1要素与第3要素相同，考虑用do...while
第1要素与第3要素不同，考虑用while











