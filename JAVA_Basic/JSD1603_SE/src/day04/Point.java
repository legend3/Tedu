package day04;
/**
 * 泛型
 * 泛型是JDK1.5之后推出的一个新特性。
 * 泛型又叫做参数化类型。是将一个类的属性，方法
 * 的参数，方法返回值的类型的定义交给了使用者。
 * 使用方在实例化当前类时传入泛型的实际使用类型。
 * 泛型的原型是Object，只是编译器在对泛型进行了
 * 相关的操作，会检查传入的实参类型是否与泛型类型
 * 一致。返回一个泛型值时会自动进行类型转换而已。
 *
 * get、set方法的意义：
 * 在很多程序中，都喜欢定义一个private变量，然后为这个私有变量加上get（），set（）方法。那为什么不直接定义一个public变量呢？这样做到底有什么好处和意义呢？难道真的仅仅只是为了代码规范？别逗了，不管你信不信，反正我是不信！带着这个问题我在网上寻找答案，真是众说纷纭啊，每个人都能说出一点点道理，但是却都不足以说服我！（所以在这里做一些总结，和大家分享，我们共同学习，共同进步。如果有什么想法和意见，也欢迎大家提出来，我们一起交流。）其中看到有这样一种说法：
 *
 * 　　“get（）和set（）方法起到对外界封闭的作用，举个例子：假如你的裤兜里有很多钱，你肯定不会让别人都来掏，肯定只有自己能拿到，或者你拿出来给他，set和get就相当与你的手  而你类里的变量就相当与你兜里的钱，对于外面的人来说不知道你类里有什么他就知道调用这个get会给他一个什么东西”
 *
 * 　　哇！貌似回答得很专业，很形象，很生动，很有道理啊，差一点我就要膜拜了，但是就在千钧一发的时刻，我冷静了下来。TNN的，差点就被你给忽悠了，这个举例完全没有回答实质性的问题嘛，会举例子的人伤不起啊~~~~(>_<)~~~~ 。如果一定要把get（）和set（）比喻成手的话，也不能比喻成你自己的手，因为get（）和set（）方法也是public属性的，谁都可以调用，也就是说任何人的手都还是可以拿到你的钱，那和直接把变量设成public有什么区别吗？至于对外面的人来说知不知道你类里有什么，这个只是变量命名规范问题而已，和属性不存在半毛钱关系吧？想让人看见和更改的变量就设成public,不想让人看见和更改的就设成privtata，已经很天衣无缝了，为什么还要get（），set（）方法呢?
 *
 * 　　我又迷茫了，带着依依不舍的心情，我离开了这位大神，继续寻找答案。其实每个人都知道get（）和set（）方法肯定是有好处的，但是有什么好处呢却又说不清楚，只能乖乖照做了（但是没有糖吃 哈哈！），而且工具可以帮你自动生成get（）和set（）方法，一点都不麻烦。但是不能因为不麻烦就傻傻的去做，而不去考虑为什么要这么做，那我们也沦落为了工具！⊙﹏⊙b汗！又偏题了，继续研究。。。
 *
 * 　　其实大多数人讲的是这关系到安全性的问题，貌似有点道理，但是却好象没什么依据，请问我使用public变量有什么不安全?   使用get（），set（）安全在哪里？
 * 　　有些人说封装性，但是变量本身就是封装在类里面的啊！
 *
 * 　　其实大部分人都是人云亦云,说什么安全性,封装性,只要学java的人都会说,没有一本java的书不提及这些名词,   其实真正理解的人不多。
 *
 * 　　我只知道用get（）和set（）有一个好处，当输入.get(.set)   时就能显示所有的属性。把所有设置都归纳起来，对于外部的使用都方便而已。假如你开发一个类给别人用，人家只要输入.get就能知道所有的属性。（天啊！就只有这么一丢丢的好处？我都不好意思跟别人说！）　　
 *
 * 　　难道get（）和set（）真的只是一种规范做法而已,完全等效于public变量？
 *
 * 　　不！我这种人是绝对不甘心找不到答案就把问题归结于代码规范的！
 *
 *
 * 那我想现在唯一可以让我信服的答案暂时就是：用get（）与set（）可以控制变量！！！
 *
 * 如果get()和set()方法里面只放一个赋值语句的话，和public变量应该没什么区别。
 * 但是设想，如果你的变量score代表的是一个学生的数学成绩，理论上，分数只可能是0-100的整数，
 * 如果你把将score设为public，不用get()和set()，那么用户很可能会输入1-100以外的数字，
 * 如果你把将score设为private,再用setScore()来设置分数，你就完全可以控制这种行为了。
 *
 * 　　　哈哈 其实几句话可以把这个问题搞定，但是为了把文章写得生动一点，废话多了一点点，请大家见谅！如果大家还知道get（）和set（）有什么其他的好处的话，指教小弟一下，感激不尽！
 *
 *
 * ————感谢各位牛人的指点，以下整理自各位的回复和点评，持续更新——————
 * 使用get()和set()而不使用public的成员变量，是因为我们设计类的时候要遵循这样的原则：
 * 		提供类的人要尽量将类中有什么隐藏起来，只告诉使用者你能做什么！
 * 		使用类的人不关心你的类中有什么，只关心类提供了什么功能！
 * 		所以设计类的时候要尽量不提供public的成员变量，最好一个都没有，只提供接口！
 * 	这条原则其实不仅是代码规范的问题，放到工作中，这就是多项目组或多部门之间合作的准则
 * 	这条原则也绝对不是某个独自编码的程序狼一拍脑袋就想出来，这是经历过有组织开发过工作的程序猿才能设计出来的。
 * ————————————————————————————————————————————————————————————
 * 这个问题其实很简单，比如
 * setAge（int age）{
 * if（age<1||age>120）
 *   throw new Exception(" 你输入的年龄不合法");
 * }else{
 *   this.age=age;
 * }
 *
 * 这个是public变量做不到的，安全是其中一个原因，另外楼主你要是学过Hiberante和Spring的话，就会知道
 * 一些类的变量，即使是public的，也必须写上set方法，否则就出错，框架设计的时候就这么要求的
 *
 * 所以别人都这么做的时候，你这么做只会有好处而不会有坏处，这就是标准
 * @author Administrator
 *
 * @param <T>
 */
public class Point<T> {
	private T x;
	private T y;

	public Point(T x, T y) {
		super();
		this.x = x;
		this.y = y;
	}

	public Point() {
	}

	/**
	 * get、set方法的意义：
	 * 	1.get、set中如果只是一句赋值语句的话，和public变量应该没什么区别
	 * 	2.get、set的存在可以扩充添加对属性设置的限制、控制！
	 * 	结论：最终形成这样的规范！
	 * @return
	 */
	public T getX() {
		return x;
	}

	public void setX(T x) {
		this.x = x;
	}

	public T getY() {
		return y;
	}

	public void setY(T y) {
		this.y = y;
	}

	public String toString(){
		return "("+x+","+y+")";
	}

	//补充：
	@Override
	public boolean equals(Object obj) {
		if(obj == null){
			return false;
		}
		if(obj == this){
			return true;
		}
		if (obj.getClass() !=getClass()) {
			return  false;
		}
		if(obj instanceof Point){//是否属于Point类型或者obj是否向上造型了
			Point p = (Point) obj;//大转小，指向小
			return p.getX() == this.getX()&&p.getY() == this.getY();
		}
		return false;
	}
}
